---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import { EDUCATION } from "@consts";
import { formatDate as utilFormatDate } from "@/lib/utils";
import Accordion from "@components/ui/Accordion.astro";

function formatEducationDate(input?: string | Date): string {
  if (!input) return "Present";
  if (input === "present") return "Present";
  try {
    return utilFormatDate(input, { format: "short" });
  } catch (e) {
    return "Invalid Date";
  }
}

// Get education collection and sort by end date (descending)
const collection = await getCollection("education");
collection.sort((a, b) => {
  const dateA = a.data.dateEnd ? new Date(a.data.dateEnd) : null;
  const dateB = b.data.dateEnd ? new Date(b.data.dateEnd) : null;

  if (!dateA && !dateB) return 0;
  if (!dateA) return 1;
  if (!dateB) return -1;

  return dateB.getTime() - dateA.getTime();
});

// Render content components
const education = await Promise.all(
  collection.map(async (item) => {
    const { Content } = await item.render();
    return { ...item, Content };
  })
);



---


<PageLayout title={EDUCATION.TITLE} description={EDUCATION.DESCRIPTION}>
  <div class="py-16 px-16 sm:px-24 md:px-32 lg:px-48 xl:px-64 relative">
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
      <div
        class="absolute -top-32 -right-32 w-48 h-48 sm:w-64 sm:h-64 md:w-80 md:h-80 rounded-full bg-gradient-to-br from-purple-400/10 to-pink-400/10 blur-3xl">
      </div>
      <div
        class="absolute -bottom-32 -left-32 w-48 h-48 sm:w-64 sm:h-64 md:w-80 md:h-80 rounded-full bg-gradient-to-tr from-blue-400/10 to-cyan-400/10 blur-3xl">
      </div>
    </div>

    <div class="text-center mb-10 relative z-10">
      <h1
        class="text-4xl sm:text-5xl md:text-6xl font-bold mb-4 bg-gradient-to-r from-gray-900 via-purple-900 to-gray-900 dark:from-white dark:via-purple-300 dark:to-white bg-clip-text text-transparent">
        {EDUCATION.TITLE}
      </h1>
      <div
        class="w-16 h-1 bg-gradient-to-r from-purple-500 to-pink-500 mx-auto rounded-full">
      </div>
    </div>

    <div class="education-timeline relative z-10">
      {
        education.map((entry, index) => (
          <div class="timeline-entry animate group relative">
            {index < education.length - 1 && (
              <div class="absolute left-[11.5px] sm:left-[13.5px] top-12 bottom-0 w-0.5 bg-gradient-to-b from-purple-500/20 to-pink-500/10" />
            )}

            <div class="flex gap-4 py-6 group-first:pt-0 sm:gap-6 sm:py-8">
              <div class="relative z-10 mt-1.5">
                <div class="timeline-dot w-5 h-5 sm:w-7 sm:h-7 rounded-full border-2 border-purple-500/40 bg-white dark:bg-gray-900 flex items-center justify-center shadow-md transition-all duration-300 group-hover:scale-110 group-hover:border-purple-500">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="w-3 h-3 sm:w-3.5 sm:h-3.5"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round">
                    <path d="M22 10v6M2 10l10-5 10 5-10 5z" />
                    <path d="M6 12v5c0 2 2 3 6 3s6-1 6-3v-5" />
                  </svg>
                </div>
              </div>

              <div class="flex-grow">
                <Accordion title={entry.data.school || ''} subtitle={entry.data.degree || undefined} index={index}>
                  <div class="px-6 pb-4 sm:px-8 sm:pb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2">
                    <div class="text-xs sm:text-sm font-medium px-2 py-0.5 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-full">
                      {formatEducationDate(entry.data.dateStart)} -{" "}
                      {formatEducationDate(entry.data.dateEnd)}
                    </div>
                  </div>

                  <article class="prose dark:prose-invert max-w-none text-sm sm:text-base px-6 pb-6 sm:px-8 sm:pb-8 pt-0">
                    <entry.Content />
                  </article>

                  {entry.data.achievements &&
                    entry.data.achievements.length > 0 && (
                      <div class="mt-4 px-6 pt-4 sm:px-8 sm:pt-4 border-t border-gray-200/50 dark:border-gray-700/50">
                        <div class="flex items-center gap-2 mb-3">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="w-4 h-4 text-amber-500 sm:w-5 sm:h-5"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round">
                            <circle cx="12" cy="8" r="6" />
                            <path d="M15.477 12.89 17 22l-5-3-5 3 1.523-9.11" />
                          </svg>
                          <p class="font-medium text-sm sm:text-base bg-gradient-to-r from-amber-500 to-yellow-500 bg-clip-text text-transparent">
                            Key Achievements
                          </p>
                        </div>
                        <ul class="achievements-list space-y-2 text-sm sm:text-base mb-6">
                          {entry.data.achievements.map((achievement) => (
                            <li class="flex items-start gap-2 group">
                              <span class="inline-block w-1.5 h-1.5 rounded-full bg-gradient-to-r from-amber-500 to-yellow-500 mt-2 flex-shrink-0" />
                              <span class="group-hover:bg-gradient-to-r group-hover:from-amber-500 group-hover:to-yellow-500 group-hover:bg-clip-text group-hover:text-transparent transition-all duration-300">
                                {achievement}
                              </span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                </Accordion>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</PageLayout>

<style>
  /* Custom animations */
  @keyframes float {
    0%,
    100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .timeline-entry {
    transition: transform 0.3s ease;
  }

  .timeline-entry:hover {
    transform: translateX(4px);
  }

  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    .animate-float,
    .animate-gradient,
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  .achievements-list li {
    position: relative;
    transition: transform 0.2s ease;
  }

  .achievements-list li:hover {
    transform: translateX(2px);
  }
</style>


